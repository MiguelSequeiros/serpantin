===============
Scaffold script
===============

``scaffold.py`` is a command-line utility that allows you to generate templates
either for a single model or for each model from a given application. You can
then change the generated templates as appropriate. The script should be put in
your project's directory next to ``manage.py``.

Usage
=====

``./scaffold.py -a APP -m MODEL``

When launched without arguments, the script shows a simple help message.

Examples
========

``./scaffold.py -a common -m person``

Creates two templates for a model ``Person`` from an application ``common``.
The templates are saved in a ``templates`` subdirectory of an application's dir.

    * Person_form.gen.html - displays a set of form fields for a model
    * Person_list.gen.html - displays all objects for a model as a table

``./scaffold.py -a common``

Creates two templates for each model from an application ``common``. The
templates are saved with the corresponding names as described above.

Auto-generated forms
====================

``scaffold.py`` defines two functions, ``template_for_model`` and
``list_template_for_model`` that return respective templates for a model class.
The templates a returned as Python strings, not as Django's ``Template``
objects. These functions are imported in async.common.views and used to
auto-generate a form template when it is not present in the templates directory.
For example, when rendering a ``Person`` form and a file ``Person_form.html` is
missing, the function ``template_for_model`` is employed to create the template
automatically. You can use this fact to override the auto-generated templates
with your own.
